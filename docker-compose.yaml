services:
  nginx-proxy:
    # restart: always
    image: jwilder/nginx-proxy:latest
    ports:
      - "${NGINX_PORT}:80"
    networks:
      - frontend
      - backend
    volumes:
      - ./configs/nginx/client_max_body_size.conf:/etc/nginx/conf.d/client_max_body_size.conf:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro

  rabbitmq:
    # restart: always
    image: rabbitmq:3.9.13-alpine
    ports:
      - "${RABBITMQ_PORT}:5672"
    networks:
      - backend
    environment:
      - VIRTUAL_HOST=rabbitmq.localhost
      - VIRTUAL_PORT=${RABBITMQ_API_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASSWORD}
    volumes:
      - ./configs/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./configs/rabbitmq/30-management_agent.enable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
      - ./configs/rabbitmq/40-consumer_timeout.conf:/etc/rabbitmq/conf.d/40-consumer_timeout.conf
      - rabbitmq_lib:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  postgres:
    # restart: always
    image: postgres
    ports:
      - ${PG_PORT}:5432
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DATABASE}
      - PG_MLFLOW_USER=${PG_MLFLOW_USER}
      - PG_MLFLOW_PASSWORD=${PG_MLFLOW_PASSWORD}
      - PG_MLFLOW_DB=${PG_MLFLOW_DATABASE}
      - PG_CELERY_USER=${PG_CELERY_USER}
      - PG_CELERY_PASSWORD=${PG_CELERY_PASSWORD}
      - PG_CELERY_DB=${PG_CELERY_DATABASE}
    volumes:
      - ./configs/postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "${PG_PORT}", "-U", "${PG_USER}"]
      interval: 5s
      timeout: 5s
      retries: 3

  s3:
    # restart: always
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - frontend
      - backend
    environment:
      - VIRTUAL_HOST=s3.localhost
      - VIRTUAL_PORT=9001
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    volumes:
      - minio_data:/data
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mlflow-server:
    # restart: always
    build:
      context: ./services/mlflow-server/
      dockerfile: Dockerfile
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      - frontend
      - backend
    environment:
      - VIRTUAL_HOST=mlflow.localhost
      - VIRTUAL_PORT=5000
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=${MLFLOW_S3_IGNORE_TLS}
    depends_on:
      - s3
      - postgres
    command: [
      "mlflow",
      "server",
      "--backend-store-uri=postgresql://${PG_MLFLOW_USER}:${PG_MLFLOW_PASSWORD}@postgres:${PG_PORT}/${PG_MLFLOW_DATABASE}",
      "--host=0.0.0.0",
      "--serve-artifacts",
      "--artifacts-destination=s3://${MLFLOW_BUCKET_NAME}"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3

  otel-lgtm:
    image: grafana/otel-lgtm:latest
    ports:
      - "${GRAFANA_PORT}:3000"
      - "4317:4317"
      - "4318:4318"
    networks:
      - frontend
      - backend
      - nginx_proxy
    environment:
      - VIRTUAL_HOST=monitoring.localhost
      - VIRTUAL_PORT=3000
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
      - GF_PATHS_DATA=/data/grafana
    volumes:
      - loki_data:/data/loki
      - grafana_data:/data/grafana
      - prometheus_data:/data/prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${GRAFANA_PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    # restart: always
    image: mher/flower
    networks:
      - frontend
      - backend
    environment:
      - VIRTUAL_HOST=celery.localhost
      - VIRTUAL_PORT=5555
      - CELERY_RESULT_BACKEND=postgresql://${PG_MLFLOW_USER}:${PG_MLFLOW_PASSWORD}@postgres:${PG_PORT}/${PG_MLFLOW_DATABASE}
    depends_on:
      - s3
      - rabbitmq
    command: [
      "celery",
      "--broker=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASSWORD}@rabbitmq:${RABBITMQ_PORT}/",
      "flower",
      "--broker-api=http://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASSWORD}@rabbitmq:${RABBITMQ_API_PORT}/api/"
    ]

  # Services
  pipeline-api:
    build:
      context: ./services/pipeline-api/
      dockerfile: Dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./services/pipeline-api/poetry.lock
        - action: sync+restart
          path: ./services/pipeline-api
          target: /usr/src/app
    networks:
      - frontend
      - backend
    environment:
      - VIRTUAL_HOST=api.localhost
      - VIRTUAL_PORT=3000
    env_file:
      - ./services/pipeline-api/.env
    depends_on:
      - postgres
      - rabbitmq
      - s3

  streamlit-ui:
    build:
      context: ./services/streamlit-ui/
      dockerfile: Dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./services/streamlit-ui/poetry.lock
        - action: sync+restart
          path: ./services/streamlit-ui
          target: /usr/src/app
    networks:
      - frontend
      - nginx_proxy
    environment:
      - VIRTUAL_HOST=ui.localhost
      - VIRTUAL_PORT=8501
    command: [
      "streamlit",
      "run",
      "main.py",
      "> /dev/null"
    ]
    env_file:
      - ./services/streamlit-ui/.env
    depends_on:
      - pipeline-api
      - postgres
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${STREAMLIT_APP_PORT}/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data-processor:
    build:
      context: ./services/data-processor/
      dockerfile: Dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./services/data-processor/poetry.lock
        - action: sync+restart
          path: ./services/data-processor
          target: /usr/src/app
    networks:
      - backend
    env_file:
      - ./services/data-processor/.env
    depends_on:
      - s3
      - rabbitmq
      - postgres

# # Use it for container debugging
# # Remove comments for starting with remote debugger
# # ports:
# #   - 5678:5678
# # entrypoint:
# #   ["sh","-c", "pip install debugpy -t /tmp && celery --quiet -A app.internals.celery.app worker --loglevel=FATAL"]

volumes:
  rabbitmq_lib:
  rabbitmq_log:
  postgres_data:
  minio_data:
  loki_data:
  grafana_data:
  prometheus_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  nginx_proxy:
    driver: bridge

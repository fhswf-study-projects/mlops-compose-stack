services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:${NGINX_PROXY_VERSION_TAG}
    container_name: nginx-proxy
    ports:
      - "80:80"
    networks:
      - backend
    volumes:
      - ./configs/nginx/client_max_body_size.conf:/etc/nginx/conf.d/client_max_body_size.conf:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro

  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION_TAG}
    networks:
      - backend
    environment:
      - VIRTUAL_HOST=rabbitmq.localhost
      - VIRTUAL_PORT=15672
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASSWORD}
    volumes:
      - ./configs/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./configs/rabbitmq/30-management_agent.enable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
      - ./configs/rabbitmq/40-consumer_timeout.conf:/etc/rabbitmq/conf.d/40-consumer_timeout.conf
      - rabbitmq_lib:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/

  wait-for-rabbitmq:
    image: atkrad/wait4x
    depends_on:
      - rabbitmq
    command: rabbitmq "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASSWORD}@rabbitmq:5672/" -t 90s -i 2000ms
    networks:
      - backend
  
  postgres:
    image: postgres:${POSTGRES_VERSION_TAG}
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DATABASE}
      - PG_MLFLOW_USER=${PG_MLFLOW_USER}
      - PG_MLFLOW_PASSWORD=${PG_MLFLOW_PASSWORD}
      - PG_MLFLOW_DB=${PG_MLFLOW_DATABASE}
      - PG_CELERY_USER=${PG_CELERY_USER}
      - PG_CELERY_PASSWORD=${PG_CELERY_PASSWORD}
      - PG_CELERY_DB=${PG_CELERY_DATABASE}
      - OTEL_USER=${OTEL_USER}
      - OTEL_PASSWORD=${OTEL_PASSWORD}
    volumes:
      - ./configs/postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - postgres_data:/var/lib/postgresql/data/

  wait-for-postgres:
    image: atkrad/wait4x
    networks:
      - backend
    depends_on:
      - postgres
    command: postgresql "postgresql://${PG_MLFLOW_USER}:${PG_MLFLOW_PASSWORD}@postgres:5432/${PG_MLFLOW_DATABASE}?sslmode=disable" -t 90s -i 2000ms

  s3:
    image: minio/minio:${MINIO_VERSION_TAG}
    networks:
      - backend
    environment:
      - VIRTUAL_HOST=s3.localhost
      - VIRTUAL_PORT=9001
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  createbuckets:
    image: minio/mc
    networks:
      - backend
    depends_on:
      - s3
    entrypoint: >
      /bin/sh -c "
      sleep 15;
      /usr/bin/mc config host add myminio http://s3:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/${MLFLOW_BUCKET_NAME} --ignore-existing;
      /usr/bin/mc mb myminio/${DVC_BUCKET_NAME} --ignore-existing --with-versioning;
      /usr/bin/mc mb myminio/${CELERY_DATA_HOLDER_BUCKET_NAME} --ignore-existing --with-versioning;
      /usr/bin/mc admin user svcacct add --access-key "${MINIO_ACCESS_KEY}" --secret-key "${MINIO_SECRET_ACCESS_KEY}" myminio ${MINIO_ROOT_USER};
      exit 0;
      "

  mlflow-server:
    networks:
      - backend
    environment:
      - VIRTUAL_HOST=mlflow.localhost
      - VIRTUAL_PORT=5000
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
      - MLFLOW_S3_IGNORE_TLS=${MLFLOW_S3_IGNORE_TLS}
      - BACKEND_STORE_URI=postgresql://${PG_MLFLOW_USER}:${PG_MLFLOW_PASSWORD}@postgres:5432/${PG_MLFLOW_DATABASE}
      - ARTIFACTS_DESTINATION=s3://${MLFLOW_BUCKET_NAME}
    depends_on:
      wait-for-postgres:
        condition: service_completed_successfully

  otel-lgtm:
    image: grafana/otel-lgtm:${OTEL_VERSION_TAG}
    networks:
      - backend
    environment:
      - VIRTUAL_HOST=monitoring.localhost
      - VIRTUAL_PORT=3000
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
      - GF_PATHS_DATA=/data/grafana
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_DEFAULT_PASSWORD}
      - OTEL_USER=${OTEL_USER}
      - OTEL_PASSWORD=${OTEL_PASSWORD}
    volumes:
      - ./collector/collector-config.yaml:/otel-lgtm/otelcol-config.yaml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - loki_data:/data/loki
      - grafana_data:/data/grafana
      - prometheus_data:/data/prometheus
    depends_on:
      wait-for-postgres:
        condition: service_completed_successfully
      wait-for-rabbitmq:
        condition: service_completed_successfully

  # Services
  pipeline-api:
    networks:
      - backend
    depends_on:
      - postgres
      - rabbitmq
      - s3

  streamlit-ui:
    depends_on:
      - otel-lgtm
      - pipeline-api

  data-processor:
    networks:
      - backend
    depends_on:
      wait-for-postgres:
        condition: service_completed_successfully
      wait-for-rabbitmq:
        condition: service_completed_successfully

volumes:
  rabbitmq_lib:
  rabbitmq_log:
  postgres_data:
  minio_data:
  loki_data:
  grafana_data:
  prometheus_data:

networks:
  backend:
    external: true
